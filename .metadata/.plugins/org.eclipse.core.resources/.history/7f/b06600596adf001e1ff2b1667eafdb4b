package com.sathya.servlet;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;



public class ProductDao {

	public int save(Product product) {
		 Connection connection=null;
		  PreparedStatement preparedStatement=null;
		  int saveResult=0;
		  try {
			  //Get the connection
			  connection =DatabaseUtils.createconnection();
			  
			  //create the Ps Object
			  preparedStatement =connection.prepareStatement("insert into product_data values(?,?,?,?,?,?,?,?)");
			  
			
			  preparedStatement.setString(1,product.getProId());
			  preparedStatement.setString(2,product.getProName());
			  preparedStatement.setDouble(3,product.getProPrice());
			  preparedStatement.setString(4,product.getProBrand());
			  preparedStatement.setString(5,product.getProMadeIn());
			  
			  
			  preparedStatement.setDate(6,product.getProMfgDate());
			  preparedStatement.setDate(7,product.getProExpDate());
			  
			  preparedStatement.setBytes(8,product.getProImage());
			  
			  saveResult=preparedStatement.executeUpdate();
			   
		  }
		  catch(SQLException e) {
			  e.printStackTrace();
			  
		  }
		  finally {
			  //before release connection check the connection present or not
			  try{
				  
			     if(connection!=null)
				  connection.close();
			     if(preparedStatement!=null)
					  preparedStatement.close();
		        }
			  catch(SQLException e) {
				  e.printStackTrace();
			  }
		  }
		return saveResult;
		
	}
public List<Product> findAll() {
		
		// Create the list to store group of records
	    List<Product> productList=new ArrayList<Product>();
	    try(Connection connection =DatabaseUtils.createconnection();
	    	Statement statement =connection.createStatement();	){
	    	//execute the query to store the resultSet                                                                                
	    	ResultSet resultSet=statement.executeQuery("select * from product_data");
	    	while(resultSet.next()) {
	    		Product product=new Product();
	    		  product.setProId(resultSet.getString("proId"));
	    		  product.setProName(resultSet.getString("proName"));
	    		  product.setProPrice(resultSet.getDouble("proPrice"));
	    		  product.setProBrand(resultSet.getString("proBrand"));
	    		  product.setProMadeIn(resultSet.getString("proMadeIn"));
	    		  product.setProMfgDate(resultSet.getDate("proMfgDate"));
	    		  product.setProExpDate(resultSet.getDate("proExpDate"));
	    		  product.setProImage(resultSet.getBytes("proImage"));
	    		  productList.add(product);
	    	
	    	}
	    }
	    	catch(SQLException e) {
	    		e.printStackTrace();
	    	}
	    	
	    
	    return productList;
	    }
public int deleteById(String proId) {
	int count=0;
	try(Connection connection=DatabaseUtils.createconnection();
			PreparedStatement preparedStatement=connection.prepareStatement("delete from product_data where proId=?"))
	{
		preparedStatement.setString(1,proId);
		
		count=preparedStatement.executeUpdate();
		
	}
	catch(SQLException e) {
		e.printStackTrace();
	}
	
	return count;

	
}
//find by id
		public Product findById(String id)
		{
			Product product=null;
			try(Connection connection=Dbconnection.createConnection();
					PreparedStatement preparedStatement=connection.prepareStatement("select * from product_data where proId=?"))
				{
					preparedStatement.setString(1,id);
					ResultSet  resultSet=preparedStatement.executeQuery();
					if(resultSet.next())
					{
						product=new Product();
						product.setProId(resultSet.getString("proId"));
						product.setProName(resultSet.getString("proName"));
						product.setProPrice(resultSet.getDouble("proPrice"));
						product.setProBrand(resultSet.getString("proBrand"));
						product.setProMadeIn(resultSet.getString("proMadeIn"));
						product.setProMfgDate(resultSet.getDate("proMfgDate"));
						product.setProExpDate(resultSet.getDate("proExpDate"));
						product.setProImage(resultSet.getBytes("proImage"));
						product.setProAudio(resultSet.getBytes("proAudio"));
						product.setProVideo(resultSet.getBytes("proVideo"));
					}
				}
				catch(SQLException e)
				{
					e.printStackTrace();
				}
			return product;
		}
		//update by id
		public int updateById(Product product)
		{
			int updateCount=0;
			try(Connection connection=DatabaseUtils.createconnection();
					PreparedStatement preparedStatement=connection.prepareStatement("update product_data set proName=?, proPrice=?, proBrand=?, proMadeIn=?, proMfgDate=?, proExpDate=?, proImage=?, proAudio=?, proVideo=? where proId=?"))
			{
				preparedStatement.setString(1,product.getProName());
				preparedStatement.setDouble(2,product.getProPrice());
				preparedStatement.setString(3,product.getProBrand());
				preparedStatement.setString(4,product.getProMadeIn());
				preparedStatement.setDate(5,product.getProMfgDate());
				preparedStatement.setDate(6,product.getProExpDate());
				preparedStatement.setBytes(7,product.getProImage());
				//preparedStatement.setBytes(8,product.getProAudio());
				//preparedStatement.setBytes(9,product.getProVideo());
				preparedStatement.setString(10,product.getProId());
				
				updateCount=preparedStatement.executeUpdate();
			}
			catch(SQLException e)
			{
				e.printStackTrace();
			}
			return updateCount;
		}
}